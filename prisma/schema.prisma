// Arquivo: prisma/schema.prisma - 100% COMPLETO E CORRIGIDO

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  name           String
  password       String
  role           String       @default("USER") // <-- LINHA CORRIGIDA
  rank           String       @default("Bronze")
  referralCode   String       @unique
  referrerId     Int?
  [cite_start]careerPoints   Int          @default(0) [cite: 3]
  createdAt      DateTime     @default(now())
  wallet         Wallet?
  [cite_start]investments    Investment[] [cite: 4]
  withdrawals    Withdrawal[]
  referrer       User?        [cite_start]@relation("Referrals", fields: [referrerId], references: [id]) [cite: 5]
  referees       User[]       @relation("Referrals")
}

model Wallet {
  id              Int         @id @default(autoincrement())
  userId          Int         @unique
  balance         Float       @default(0)
  referralBalance Float       @default(0)
  [cite_start]user            User        @relation(fields: [userId], references: [id]) [cite: 6]
  transactions    Transaction[]
}

model Plan {
  id            Int          @id @default(autoincrement())
  name          String
  price         Float
  dailyReturn   Float
  durationDays  Int
  investments   Investment[]
}

model Investment {
  id        Int      @id @default(autoincrement())
  userId    Int
  [cite_start]planId    Int [cite: 7]
  startDate DateTime @default(now())
  endDate   DateTime
  status    String   @default("ACTIVE")
  user      User     @relation(fields: [userId], references: [id])
  plan      Plan     @relation(fields: [planId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  walletId    Int
  amount      Float
  [cite_start]type        String // e.g., 'DEPOSIT', 'WITHDRAWAL', 'YIELD', 'REFERRAL_BONUS', 'PLAN_PURCHASE' [cite: 8]
  description String
  createdAt   DateTime @default(now())
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model Withdrawal {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  walletType  String   // 'balance' or 'referral'
  [cite_start]status      String   @default("PENDING") // 'PENDING', 'APPROVED', 'REJECTED' [cite: 9]
  reason      String?  // Reason for rejection
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}