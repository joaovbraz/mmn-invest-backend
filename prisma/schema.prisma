// Arquivo: prisma/schema.prisma - VERS√ÉO COM CARGO DE ADMIN

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  name         String?
  password     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  referralCode String?      @unique
  referrerId   Int?
  referrer     User?        @relation("Referrals", fields: [referrerId], references: [id])
  referrals    User[]       @relation("Referrals")
  
  rank         String       @default("Bronze")
  
  // --- CAMPO NOVO PARA O CARGO ---
  role         String       @default("USER") // Cargos: USER, ADMIN
  
  investments  Investment[]
  wallet       Wallet?
  withdrawals  Withdrawal[]
}

// ... (o resto do schema.prisma continua exatamente o mesmo) ...

model Plan {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  price         Float
  dailyReturn   Float
  investments   Investment[]
}

model Investment {
  id        Int      @id @default(autoincrement())
  startDate DateTime @default(now())
  status    String   @default("ACTIVE")
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  planId    Int
  plan      Plan     @relation(fields: [planId], references: [id])
}

model Wallet {
  id              Int      @id @default(autoincrement())
  balance         Float    @default(0.0)
  referralBalance Float    @default(0.0)
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id])
  transactions    Transaction[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  amount      Float
  type        String
  description String
  createdAt   DateTime @default(now())
  walletId    Int
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model Withdrawal {
  id        Int      @id @default(autoincrement())
  amount    Float
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}