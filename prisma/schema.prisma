// Arquivo: prisma/schema.prisma - 100% COMPLETO E CORRIGIDO

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  name           String
  phone          String?      // <-- CAMPO ADICIONADO CORRETAMENTE
  password       String
  role           String       @default("USER")
  rank           String       @default("Bronze")
  referralCode   String       @unique
  referrerId     Int?
  careerPoints   Int          @default(0)
  createdAt      DateTime     @default(now())
  wallet         Wallet?
  investments    Investment[]
  withdrawals    Withdrawal[]
  referrer       User?        @relation("Referrals", fields: [referrerId], references: [id])
  referees       User[]       @relation("Referrals")
  pixDeposits    PixDeposit[] // <-- LINHA ADICIONADA
}

model Wallet {
  id              Int           @id @default(autoincrement())
  userId          Int           @unique
  balance         Float         @default(0)
  referralBalance Float         @default(0)
  user            User          @relation(fields: [userId], references: [id])
  transactions    Transaction[]
}

model Plan {
  id           Int          @id @default(autoincrement())
  name         String
  price        Float
  dailyReturn  Float
  durationDays Int
  investments  Investment[]
}

model Investment {
  id        Int      @id @default(autoincrement())
  userId    Int
  planId    Int
  startDate DateTime @default(now())
  endDate   DateTime
  status    String   @default("ACTIVE")
  user      User     @relation(fields: [userId], references: [id])
  plan      Plan     @relation(fields: [planId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  walletId    Int
  amount      Float
  type        String // e.g., 'DEPOSIT', 'WITHDRAWAL', 'YIELD', 'REFERRAL_BONUS', 'PLAN_PURCHASE'
  description String
  createdAt   DateTime @default(now())
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model Withdrawal {
  id         Int      @id @default(autoincrement())
  userId     Int
  amount     Float
  walletType String   // 'balance' or 'referral'
  status     String   @default("PENDING") // 'PENDING', 'APPROVED', 'REJECTED'
  reason     String?  // Reason for rejection
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

// NOVA TABELA PARA CONTROLAR OS DEPÃ“SITOS PIX
model PixDeposit {
  id            Int      @id @default(autoincrement())
  userId        Int
  amount        Float
  status        String   @default("PENDING") // PENDING, COMPLETED, EXPIRED
  txid          String   @unique
  payloadQrCode String   @db.Text
  imagemQrcode  String?  @db.Text
  efilocId      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}